/****************************************************************************
 **
 ** File Name: adm_test_adm_agent.c
 **
 ** Description: TODO
 **
 ** Notes: TODO
 **
 ** Assumptions: TODO
 **
 ** Modification History:
 **  YYYY-MM-DD  AUTHOR           DESCRIPTION
 **  ----------  --------------   --------------------------------------------
 **  {{datestamp}}  AUTO             Auto-generated c file
 **
 ****************************************************************************/


#include "adm_test_adm_impl.h"
#include "refda/agent.h"
#include "refda/register.h"
#include "refda/valprod.h"
#include "refda/reporting.h"
#include "cace/ari/text.h"
#include "cace/util/logging.h"
#include "cace/util/defs.h"

static void test_adm_init_const(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj);
static void test_adm_init_edd(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj);
static void test_adm_init_op(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj);
static void test_adm_init_var(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj);
static void test_adm_init_ctrl(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj);

int test_adm_init(refda_agent_t *agent)
{
	CHKERR1(agent);
                            
	cace_amm_obj_ns_t *adm = cace_amm_obj_store_add_ns(&(agent->objs), "test-adm", true, ADM_ENUM_TEST_ADM);

	if (pthread_mutex_lock(&(agent->objs_mutex))){
		return 2;
	}

	if (adm)
	{
		cace_amm_obj_desc_t *obj;
		test_adm_setup();
		test_adm_init_const(agent, adm, obj);
		test_adm_init_edd(agent, adm, obj);
		test_adm_init_op(agent, adm, obj);
		test_adm_init_var(agent, adm, obj);
		test_adm_init_ctrl(agent, adm, obj);
	}

	if (pthread_mutex_unlock(&(agent->objs_mutex))){
		return 2;
	}

}

void test_adm_set_type(refda_agent_t *agent, amm_type_t *type, const ari_type_t type_enum)
{

	const amm_type_t *amm_type = amm_type_get_builtin(type_enum);                
	if (amm_type == NULL){ //not found within builtin types
		amm_type = refda_agent_get_typedef(agent, ADM_ENUM_TEST_ADM, type_enum);
	}                
	amm_type_set_use_direct(type, amm_type);

}

void test_adm_add_param(refda_agent_t *agent, cace_amm_obj_desc_t *obj, const char *name, const ari_type_t type_enum)
{
	cace_amm_formal_param_t *fparam = refda_register_add_param(obj, name);
	test_adm_set_type(agent, &(fparam->typeobj), type_enum);
}

refda_amm_const_desc_t *test_adm_init_const_helper(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj, const char *name, const ari_type_t type_enum, const int64_t obj_enum)
{

	refda_amm_const_desc_t *objdata = ARI_MALLOC(sizeof(refda_amm_const_desc_t));                
	refda_amm_const_desc_init(objdata);                
	amm_type_set_use_direct(&(objdata->value), amm_type_get_builtin(type_enum));                
	obj = refda_register_const(adm, cace_amm_obj_id_withenum(name, obj_enum), objdata);                
	return objdata;                

}

void test_adm_init_const(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj)
{

	refda_amm_const_desc_t *objdata = test_adm_init_const_helper(agent, adm, obj, "const1", ARI_TYPE_UVAST, 0);
	{
		ari_set_uvast(&(objdata->value), 31)
	}
	refda_amm_const_desc_t *objdata = test_adm_init_const_helper(agent, adm, obj, "showall", ARI_TYPE_AC, 1);
	{
		ari_ac_t acinit;
		ari_ac_init(&acinit);
		{
			ari_t *item;
			item = ari_list_push_back_new(acinit.items);
			ari_set_objref_path_intid(item, ADM_ENUM_TEST_ADM, ARI_TYPE_CONST, 0);
		}
		ari_set_ac(&(objdata->value), &acinit)
	}
}

void test_adm_init_edd_helper(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj, const char *name, const ari_type_t type_enum, int64_t obj_enum, refda_amm_edd_produce_f prod_func)
{

	refda_amm_edd_desc_t *objdata = ARI_MALLOC(sizeof(refda_amm_edd_desc_t));                
	refda_amm_edd_desc_init(objdata);
	test_adm_set_type(agent, &(objdata->prod_type), type_enum);
	objdata->produce = prod_func;                
	obj = refda_register_edd(adm, cace_amm_obj_id_withenum(name, obj_enum), objdata);                

}

void test_adm_init_edd(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj)
{

	test_adm_init_edd_helper(agent, adm, obj, "edd_uvast", ARI_TYPE_UVAST, 0, test_adm_get_edd__uvast);
	test_adm_init_edd_helper(agent, adm, obj, "edd_uvast_param", ARI_TYPE_UVAST, 1, test_adm_get_edd__uvast__param);
	{
		test_adm_add_param(agent, obj, "other", ARI_TYPE_UVAST);
	}
	test_adm_init_edd_helper(agent, adm, obj, "edd_tp", ARI_TYPE_TP, 2, test_adm_get_edd__tp);
	test_adm_init_edd_helper(agent, adm, obj, "endpoint_active", ARI_TYPE_UVAST, 3, test_adm_get_endpoint__active);
	{
		test_adm_add_param(agent, obj, "endpoint_name", ARI_TYPE_TEXTSTR);
	}
}

refda_amm_const_desc_t *test_adm_init_var_helper(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj, const char *name, const ari_type_t type_enum, const int64_t obj_enum)
{

	refda_amm_var_desc_t *objdata = ARI_MALLOC(sizeof(refda_amm_var_desc_t));                
	refda_amm_var_desc_init(objdata);                
	amm_type_set_use_direct(&(objdata->value), amm_type_get_builtin(type_enum));                
	obj = refda_register_var(adm, cace_amm_obj_id_withenum(name, obj_enum), objdata);                
	return objdata;                

}

void test_adm_init_var(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj)
{

	refda_amm_const_desc_t *objdata = test_adm_init_var_helper(agent, adm, obj, "var_uvast_val", ARI_TYPE_UVAST, 0);
	{
		ari_set_uvast(&(objdata->value), 34)
	}
}

void test_adm_init_ctrl_helper(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj, const char *name, const ari_type_t type_enum, int64_t obj_enum, refda_amm_edd_produce_f prod_func)
{

	refda_amm_ctrl_desc_t *objdata = ARI_MALLOC(sizeof(refda_amm_ctrl_desc_t));                
	refda_amm_ctrl_desc_init(objdata);
	objdata->execute = prod_func;                
	obj = refda_register_ctrl(adm, cace_amm_obj_id_withenum(name, obj_enum), objdata);                

}

void test_adm_init_ctrl(refda_agent_t *agent, cace_amm_obj_ns_t *adm, cace_amm_obj_desc_t *obj)
{

	test_adm_init_ctrl_helper(agent, adm, obj, "get", ARI_TYPE_BYTESTR, 2, test_adm_ctrl_get);
	{
		test_adm_add_param(agent, obj, "object", ARI_TYPE_OBJECT);
	}
	test_adm_init_ctrl_helper(agent, adm, obj, "set", ARI_TYPE_BYTE, 3, test_adm_ctrl_set);
	{
		test_adm_add_param(agent, obj, "object", ARI_TYPE_OBJECT);
		test_adm_add_param(agent, obj, "data", ARI_TYPE_BYTESTR);
	}
}

